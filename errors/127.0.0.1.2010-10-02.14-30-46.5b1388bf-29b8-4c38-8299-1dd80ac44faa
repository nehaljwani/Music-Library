(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/pratyush/web2py/applications/music_library/models/db.py'
p4
sS'code'
p5
S'if request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key=\'sha512:40b75704-2d17-4fe6-9e58-2d33a13a5d59\'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\ndb.define_table(\'music\',\n                SQLField(\'name\'),\n                SQLField(\'genre\'),\n                SQLField(\'artist\'),\n                SQLField(\'album\'),\n                SQLField(\'language\'),\n                SQLField(\'rating\',\'integer\'),\n                SQLField(\'song\', \'upload\'))\n\n\n\n""" the above db table is the core of the application developed, only a single table has been used to develop the entire application. Functionalities like- \n    a)Searching for songs in accordance with above fields \n    b)Viewing all the songs\n    c)Adding new songs with the aforesaid mentioned criteria\n    d)deletion of a song \n    e)developing an open source platform for song sharing\n    f)seperate user id and password for the contributors\n    g)playing a particular song online\n    h)main page will show latest updates, top-rated songs, recently played, recently added songs\n    i)providing download to registered and even unregistered users               \n"""\n\n\n\ndb.music.name.requires=IS_NOT_EMPTY()#name of song should not be left empty so that it can be found easily later\ndb.music.song.requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,db.music.song)]#empty uploads disallowed and repeated entries forbidden\ndb.music.genre.requires=IS_IN_SET([\'blues\',\'alternative\',\'jazz\',\'rock\',\'metal\',\'pop\',\'retro\',\'r&b\',\'rap\',\'classical\',\'gazal\',\'ska\',\'punk\',\'hip-hop\',\'hardcore\',\'gothic\',\'sufi\',\'opera\',\'techno\',\'folk\',\'other\'])#genre should be an entity of the set given alongside\ndb.music.album.requires=IS_NOT_EMPTY()#album field shouldnt be left although multiple songs can be of the same album\ndb.music.rating.requires = IS_IN_SET(range(0,6))#rating by the user on a scale of 0-5\ndb.music.language.requires=IS_IN_SET([\'english\',\'hindi\',\'telugu\',\'tamil\',\'bengali\',\'malayalam\',\'spanish\',\'italian\',\'russian\',\'swiss\',\'mandarin\',\'japanese\',\'african\',\'korean\',\'arabic\',\'other european\',\'other asian\',\'latin american\',\'other\'])#music language is required for the convenience users listening to particular language, it wud be an entity of set given alongside\ndb.music.artist.requires=IS_NOT_EMPTY()#artist field shouldnt be left empty\n\n\nimport datetime\n\n\ndb.define_table(\'comment\',\n                SQLField(\'comment\',\'text\', requires=IS_NOT_EMPTY()),\n                SQLField(\'user\' , db.auth_user , default=auth.user_id, writable=False, requires= IS_IN_DB(db,db.auth_user.id)),\n                SQLField(\'music\', db.music, requires=IS_IN_DB(db,db.music.id, \'%(name)s\')))\n\ndb.define_table(\'playlist\',\n\t\tSQLField(\'Playlist\',\'string\',requires=IS_NOT_EMPTY),\n\t\tSQLField(\'song\',db.music,requires=IS_IN_DB(db,db.music.id,\'%(name)\')),\n\t\tSQLField(\'user\',db.auth_user,default=auth.user_id,writable=False,requires=IS_IN_DB(db,db.auth_user.id)))\n\n\n\n\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/pratyush/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/pratyush/web2py/applications/music_library/models/db.py", line 58, in <module>\n    SQLField(\'user\',db.auth_user,default=auth.user_id,writable=False,requires=IS_IN_DB(db,db.auth_user.id)))\n  File "/home/pratyush/web2py/gluon/sql.py", line 1275, in define_table\n    t._create(migrate=migrate, fake_migrate=fake_migrate)\n  File "/home/pratyush/web2py/gluon/sql.py", line 1734, in _create\n    fake_migrate=fake_migrate)\n  File "/home/pratyush/web2py/gluon/sql.py", line 1800, in _migrate\n    self._db._execute(sub_query)\n  File "/home/pratyush/web2py/gluon/sql.py", line 895, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\nOperationalError: duplicate column name: user\n'
p8
s.
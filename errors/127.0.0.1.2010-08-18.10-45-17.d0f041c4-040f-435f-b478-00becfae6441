(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/pratyush/web2py/applications/music_library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = T(\'Welcome to Courses Portal\')\n\t\n    #courses=db().select(db.courses.ALL, orderby=db.courses.course_id)\n    return dict(message=T(\'IIIT Courses Portal\'))\n\n#@auth.requires_login()\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    #return dict(form=crud.create(db.courses))\t\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n@auth.requires_login()\ndef home():\n    records=db().select(db.music.ALL, orderby=db.music.name)\n    return dict(records=records)\n\n@auth.requires_login()\ndef add():\n    form = SQLFORM(db.music)\n    if form.accepts(request.vars):\n        response.flash = \'Success!\'\n    elif form.errors:\n        response.flash = \'Error adding new music\'\n    \n    return dict(form=form)\n\n@auth.requires_login()\ndef view():\n    perpage = 10  \n    mode=\'view\'\n    rates={}\n    unrate=\'\'\n    if request.vars and request.vars.has_key(\'page\'):\n        pagenum = int(request.vars[\'page\'])\n    else:\n        pagenum = 0\n        \n  \n    """if request.vars and request.vars.has_key(\'unrated\') and request.vars.unrated==\'true\':\n        condition=(db.music.id.belongs(db((db.music.id==db.musicrate.musicid)&(db.musicrate.userid==session.user_id))._select(db.musicrate.musicid, groupby=db.musicrate.musicid)))\n        unrate=\'true\'\n    else:\n        condition=(db.music.id==0) \n    """\n\n    musics=db(\'NOT %s\' % (condition)).select(db.music.id, db.music.name, db.music.song, limitby=((pagenum)*perpage,(pagenum+1)*perpage), groupby=db.music.name)\n    \n    #rates =getUsermusicRate(session.user_id)\n    \n    rows = db(\'NOT %s\' % (condition)).select(db.music.id, groupby=db.music.id)\n    \n    numofpage = ((len(rows)-1) / perpage) +1\n    return dict(musics=musics,mode=mode, numofpage=numofpage, currentpage=pagenum,rates=rates,unrate=unrate);\n\n"""@auth.requires_login()\ndef rate():\n    form = SQLFORM(db.test)\n    return dict(form=form)"""\n\nresponse._vars=response._caller(view)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/pratyush/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/pratyush/web2py/applications/music_library/controllers/default.py", line 106, in <module>\n  File "/home/pratyush/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/pratyush/web2py/gluon/tools.py", line 1864, in f\n    return action(*a, **b)\n  File "/home/pratyush/web2py/applications/music_library/controllers/default.py", line 92, in view\n    musics=db(\'NOT %s\' % (condition)).select(db.music.id, db.music.name, db.music.song, limitby=((pagenum)*perpage,(pagenum+1)*perpage), groupby=db.music.name)\nNameError: global name \'condition\' is not defined\n'
p8
s.